"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Facebook_instances, _Facebook_withErrorHandling;
Object.defineProperty(exports, "__esModule", { value: true });
const got = require('got').default;
const Provider = require('../Provider');
const { getURLMeta } = require('../../helpers/request');
const logger = require('../../logger');
const { adaptData, sortImages } = require('./adapter');
const { withProviderErrorHandling } = require('../providerErrors');
const { prepareStream } = require('../../helpers/utils');
const getClient = ({ token }) => got.extend({
    prefixUrl: 'https://graph.facebook.com',
    headers: {
        authorization: `Bearer ${token}`,
    },
});
async function getMediaUrl({ token, id }) {
    const body = await getClient({ token }).get(String(id), { searchParams: { fields: 'images' }, responseType: 'json' }).json();
    const sortedImages = sortImages(body.images);
    return sortedImages[sortedImages.length - 1].source;
}
/**
 * Adapter for API https://developers.facebook.com/docs/graph-api/using-graph-api/
 */
class Facebook extends Provider {
    constructor() {
        super(...arguments);
        _Facebook_instances.add(this);
    }
    static get authProvider() {
        return 'facebook';
    }
    async list({ directory, token, query = { cursor: null } }) {
        return __classPrivateFieldGet(this, _Facebook_instances, "m", _Facebook_withErrorHandling).call(this, 'provider.facebook.list.error', async () => {
            const qs = { fields: 'name,cover_photo,created_time,type' };
            if (query.cursor)
                qs.after = query.cursor;
            let path = 'me/albums';
            if (directory) {
                path = `${directory}/photos`;
                qs.fields = 'icon,images,name,width,height,created_time';
            }
            const client = getClient({ token });
            const [{ email }, list] = await Promise.all([
                client.get('me', { searchParams: { fields: 'email' }, responseType: 'json' }).json(),
                client.get(path, { searchParams: qs, responseType: 'json' }).json(),
            ]);
            return adaptData(list, email, directory, query);
        });
    }
    async download({ id, token }) {
        return __classPrivateFieldGet(this, _Facebook_instances, "m", _Facebook_withErrorHandling).call(this, 'provider.facebook.download.error', async () => {
            const url = await getMediaUrl({ token, id });
            const stream = got.stream.get(url, { responseType: 'json' });
            await prepareStream(stream);
            return { stream };
        });
    }
    // eslint-disable-next-line class-methods-use-this
    async thumbnail() {
        // not implementing this because a public thumbnail from facebook will be used instead
        logger.error('call to thumbnail is not implemented', 'provider.facebook.thumbnail.error');
        throw new Error('call to thumbnail is not implemented');
    }
    async size({ id, token }) {
        return __classPrivateFieldGet(this, _Facebook_instances, "m", _Facebook_withErrorHandling).call(this, 'provider.facebook.size.error', async () => {
            const url = await getMediaUrl({ token, id });
            const { size } = await getURLMeta(url, true);
            return size;
        });
    }
    async logout({ token }) {
        return __classPrivateFieldGet(this, _Facebook_instances, "m", _Facebook_withErrorHandling).call(this, 'provider.facebook.logout.error', async () => {
            await getClient({ token }).delete('me/permissions', { responseType: 'json' }).json();
            return { revoked: true };
        });
    }
}
_Facebook_instances = new WeakSet(), _Facebook_withErrorHandling = 
// eslint-disable-next-line class-methods-use-this
async function _Facebook_withErrorHandling(tag, fn) {
    return withProviderErrorHandling({
        fn,
        tag,
        providerName: Facebook.authProvider,
        isAuthError: (response) => { var _a, _b; return typeof response.body === 'object' && ((_b = (_a = response.body) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.code) === 190; },
        getJsonErrorMessage: (body) => { var _a; return (_a = body === null || body === void 0 ? void 0 : body.error) === null || _a === void 0 ? void 0 : _a.message; },
    });
};
module.exports = Facebook;
